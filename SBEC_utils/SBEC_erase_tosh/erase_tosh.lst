C:\Users\Adam\Desktop\jeep_2.5L\SBEC_utils\SBEC_erase_tosh\erase_tosh.lst - generated by MGTEK Assembler ASM11 V1.26 Build 144 for WIN32 (x86) - Tue Dec 28 18:16:29 2021

    1:                                 ; 68HC11 bootstrap, download to a SBEC that has been
    2:                                 ; placed into bootstrap mode by applying 12 volts to
    3:                                 ; pin 45 until SBEC sends 0x00 on pin 25.
    4:                                 
    5:          =00000000                  ORG $0000
    6:                                 
    7:     0000                        THE_BEGIN:
    8:     0000                        Start:
    9:     0000 8E 00FF                    ldS     #$FF        ; stack pointer = 0xFF
   10:     0003 CE 1000                    ldX     #$1000      ; config 68HC11 registers
   11:     0006 CC 330C                    ldD     #$330C      ; config SCI
   12:     0009 A7 2B                      staA    $2B,X       ; store value in register A ($33) in 0x1000 + 0x002B
   13:                                                         ; configures SCI for 1200 BAUD
   14:     000B E7 2D                      staB    $2D,X       ; store value in register B ($0C) in 0x1000 + 0x002D
   15:                                                         ; configures SCI for TXD/RXD
   16:     000D 0F                         sei                 ; disable interrupts
   17:     000E CC 6001                    ldD     #$6001      ; load D register with 0x6001
   18:     0011 A7 3C                      staA    $3C,X       ; store value in register A ($60) in 0x1000 + 0x003C
   19:                                                         ; enables Special Mode
   20:     0013 E7 3F                      staB    $3F,X       ; store valie in register B ($01) in 0x1000 + 0x003F
   21:                                                         ; System Config Register
   22:                                 
   23:                                 ; give receiver around 100ms to apply 20 volts to pin 45
   24:                                 
   25:     0015 CE 7E00                    ldX     #$7E00
   26:     0018                        wait_1:
   27:     0018 09                         deX
   28:     0019 26 FD                      bne     wait_1
   29:                                 
   30:     001B CC AAC0                    ldD     #$AAC0
   31:     001E B7 D555                    staA    $D555       ; write $AA to address $D555
   32:     0021 43                         comA                ; $AA is now $55
   33:     0022 B7 AAAA                    staA    $AAAA       ; write $55 to address $AAAA
   34:     0025 F7 D555                    staB    $D555       ; write $C0 to address $D555
   35:     0028 CC FF0C                    ldD     #$FF0C
   36:     002B B7 AAAA                    staA    $AAAA       ; write $FF to address $AAAA
   37:                                 
   38:     002E                        wait_2sec:
   39:     002E CE D903                    ldX     #$D903
   40:                                 
   41:     0031                        wait_2:
   42:     0031 09                         deX
   43:     0032 26 FD                      bne     wait_2
   44:     0034 5A                         decB
   45:     0035 26 F7                      bne     wait_2sec
   46:     0037 F6 AAAA                    ldaB    $AAAA       ; read from address $AAAA
   47:     003A F6 D555                    ldaB    $D555       ; read from address $D555
   48:                                 
   49:     003D CE 8000                    ldX     #$8000
   50:     0040                        SendByte:
   51:     0040 E6 00                      ldaB    0,X
   52:                                 
   53:     0042                        WaitForSCI:
   54:     0042 B6 102E                    ldaA    $102E
   55:     0045 84 80                      andA    #%10000000
   56:     0047 27 F9                      beq     WaitForSCI
   57:     0049 F7 102F                    staB    $102F
   58:     004C 08                         inX
   59:     004D 26 F1                      bne     SendByte
   60:     004F CF                         stop
   61:                                 
   62:     0050                        THE_END:
   63:                                 
   64:                                                              ; pad bootstrap to 256 total bytes
   65:                                  REPEAT 256-(THE_END-THE_BEGIN)
   66:                                     fcb 0x00
   67:                                  ENDR

Symbols:
sendbyte                        *00000040
the_begin                       *00000000
the_end                         *00000050
wait_1                          *00000018
wait_2                          *00000031
wait_2sec                       *0000002e
waitforsci                      *00000042

